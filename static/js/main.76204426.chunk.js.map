{"version":3,"sources":["components/Formulaire.js","App.js","serviceWorker.js","index.js"],"names":["inputStyle","minWidth","width","maxWidth","Exercice","react_default","a","createElement","className","style","marginBottom","input","addonBefore","addonAfter","Formulaire","_ref","num","exercices","i","push","Formulaire_Exercice","key","es_button","type","htmlType","App","state","handleChange","event","target","value","_this","setState","console","log","this","onChange","min","max","components_Formulaire","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+MAGMA,EAAa,CACfC,SAAU,QACVC,MAAO,iBACPC,SAAU,SAGRC,EAAW,kBACbC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWC,MAAO,CAAEC,aAAc,SAC7CL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAOC,YAAY,UAAUH,MAAO,CAAEN,SAAU,WAChDE,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAOC,YAAY,YAASH,MAAOT,IACnCK,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAOC,YAAY,oBAAcH,MAAOT,IACxCK,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAOC,YAAY,QAAQC,WAAW,WAAWJ,MAAOT,MAwBjDc,EApBG,SAAAC,GAEd,IAF2B,IAAVC,EAAUD,EAAVC,IACXC,EAAY,GACTC,EAAI,EAAGA,EAAIF,EAAKE,IACrBD,EAAUE,KAAKd,EAAAC,EAAAC,cAACa,EAAD,CAAUC,IAAKH,KAElC,OACIb,EAAAC,EAAAC,cAAA,YACMU,EACFZ,EAAAC,EAAAC,cAACe,EAAA,EAAD,CACAC,KAAK,UACLC,SAAS,UAFT,oBCYGC,6MAhCbC,MAAQ,CACNV,IAAK,KAGPW,aAAe,SAAAC,GACb,IAAMZ,EAAMY,EAAMC,OAAOC,MACzBC,EAAKC,SAAS,CAAEhB,QAChBiB,QAAQC,IAAIlB,4EAIZ,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CACAmB,MAAOK,KAAKT,MAAMV,IAClBoB,SAAUD,KAAKR,aACfJ,KAAK,SACLc,IAAI,IACJC,IAAI,IACJ1B,YAAY,MACZH,MAAO,CACLP,MAAO,QACPQ,aAAc,UAGdL,EAAAC,EAAAC,cAACgC,EAAD,CAAYvB,IAAKmB,KAAKT,MAAMV,cA3BpBwB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.76204426.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Input, Button } from 'antd';\r\n\r\nconst inputStyle = {\r\n    minWidth: '240px',\r\n    width: 'calc(1/3*100%)',\r\n    maxWidth: '320px'\r\n}\r\n\r\nconst Exercice = () => (\r\n    <div className='exercice' style={{ marginBottom: '16px'}} >\r\n        <Input addonBefore='Execice' style={{ maxWidth: '400px'}} />\r\n        <Input addonBefore='Séries' style={inputStyle} />\r\n        <Input addonBefore='Répétitions' style={inputStyle} />\r\n        <Input addonBefore='Repos' addonAfter='secondes' style={inputStyle} />\r\n    </div>\r\n)\r\n    \r\nconst Formulaire= ({ num }) => {\r\n    const exercices = []\r\n    for (let i = 0; i < num; i++){\r\n        exercices.push(<Exercice key={i} />)\r\n    }\r\n    return (\r\n        <form>\r\n            { exercices }\r\n            <Button\r\n            type='primary'\r\n            htmlType='submit'>\r\n                Envoyer le PDF\r\n            </Button>\r\n\r\n        </form>\r\n    )\r\n}\r\n    \r\n\r\n\r\nexport default Formulaire;","import React, { Component } from 'react';\nimport './App.css';\nimport Formulaire from'./components/Formulaire';\nimport { Input } from 'antd';\n\nclass App extends Component {\n  state = {\n    num: 0 \n  }\n\n  handleChange = event => {\n    const num = event.target.value\n    this.setState({ num })\n    console.log(num)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Exercices</h1>\n        <Input\n        value={this.state.num}\n        onChange={this.handleChange}\n        type='number'\n        min='0'\n        max='7'\n        addonBefore='Num'\n        style={{\n          width: '160px',\n          marginBottom: '16px'\n        }}\n        />\n          <Formulaire num={this.state.num} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}